Java Best Practices:

1. Follow Coding Standards and Best Practices:

Oracle provides a set of code conventions for writing Java code, which covers topics such as naming conventions, indentation, and commenting. Adhering to these conventions can improve code readability, maintainability, and reduce the likelihood of errors in the code and help in debugging the code.

	1.1 Naming Conventions:
		a) Class Name: start the name with capital letters
					Eg:    public class Employee
					eg:	 public class CountryCity
		b) Interface Name: similar to class
					eg: public interface Interface1
					eg: public interface Interface2
		c) Method Name: camel casing 	
					eg: public static void getData(){...}
		d) Variable Name: camel casing 	
					eg: int studentAge;
		e) Package Name: Use (.) and small case:
					eg: import java.util; or import java.package1;
		f) Constant Name: All caps
					eg: static final string COLLEGE_NAME= "IIT BOMBAY"
	1.2 Indentations: Spacing to be done so that code becomes more readable.

	1.3 Comments: a) //, single line

			  b) multiple line
				/* 
				abc
				def
			     */

			  c) function comments
				
				/**********************************************
				* Function is used to change the name of the employee to a user defined value
				* nameOfEmployee (new name of the employee it is taken as a parameter that has to be set)
				* current nameOfEmployee (current nameOfEmployee defined by this.nameOfEmployee is changed using the user defined value)
				* return this.nameOfEmployee (the modified nameOfEmployeeis returned)
				*********************************************/


				public String changeName(String nameOfEmployee){
  					this.nameOfEmployee=nameOfEmployee;
					return this.nameOfEmployee;
				}


			  c)  Documentation comments
				/**
				* abc
				* def
				* ghi
			      */ 

2. Club the similar access modifiers items together public, private, protected and default
Eg: 
public void setAge(int age);
public String[] carModelName;


private int age;
private String schoolName;

protected rollNo;
protected int[] studentMarks;

float studentAverage;
String studentGrade;  

3. Class Members should be private

public class Employee{
	private int age;
	private String name;
	private int id;

	public Employee(int age, String name, int id){
		this.age= age;
		this.name= name;
		this.id= id;
	}
}

4. Using Underscores in Numeric Literals

Eg: long employeeID= 11_222_333_444L;

5. Using StringBuilder or StringBuffer instead of String Concatenation

StringBuilder employeeFirstName;
StringBuilder employeeLastName;

StringBuilder employeeFullName= employeeFirstName+employeeLastName;

This is because the string concat takes O(N) time complexity

6. Avoid Redundant Initialization (0-false-null)

private int age=0; //0 is assigned by default
private String name=null; //null is assigned by default

7. Code to the Interface not Implementation

8. Using Enums or Constant Class instead of Constant Interface 






Things to Avoid:

1. Avoid code duplications
DRY principle

2. Avoid hard coding
Eg: public int rollNumber=10;

3. Avoid emplty catch blocks

public class CheckTryCatch {
    public static void main(String[] args) {
       
        try {
            System.out.println("Try block entered");
		int a= 5/0;
		System.out.println("Try block ended");
 
        } catch (Exception ex) {
            System.out.println("Exception" +
                               ex.getMessage());
        }
    }
}

4. Dont use excess If else statements
